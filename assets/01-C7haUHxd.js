import{aj as n,c as a,o as e,ar as t}from"./main-B6u4T-Fw.js";const d={class:"prose prose-sm m-auto text-left"},m=[],p={__name:"01",setup(i,{expose:s}){return s({frontmatter:{meta:[]}}),n({meta:[]}),(h,l)=>(e(),a("div",d,l[0]||(l[0]=[t(`<h1 id="01.16" tabindex="-1">01.16</h1><h2 id="chisel" tabindex="-1">Chisel</h2><h3 id="record" tabindex="-1">Record</h3><p><code>chisel3.Record</code>，抽象类，类似于<code>Bundle</code>，但是可以动态生成端口以及名字。 适合用于库而非用户模块。 用例，配合<code>chisel3.experimental.DataMirror</code>，可以实现对模块的包装，例如下面的<code>DemoTop</code>可以对任意模块添加差分时钟端口：</p><figure class="code-block"><input id="collapse-code-12" class="toggle" type="checkbox" checked> <figcaption><div><label for="collapse-code-12" class="lbl-toggle"></label> <span>scala</span></div> <button class="copy" title="click to copy"></button></figcaption><pre class="collapsible-content"><code class="hljs language-scala"><table class="hljs-ln"><tbody><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="1"><div class="hljs-ln-n" data-line-number="1"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="1"><span class="hljs-keyword">package</span> demo
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="2"><div class="hljs-ln-n" data-line-number="2"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="2"> 
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="3"><div class="hljs-ln-n" data-line-number="3"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="3"><span class="hljs-keyword">import</span> chisel3._
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="4"><div class="hljs-ln-n" data-line-number="4"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="4"><span class="hljs-keyword">import</span> chisel3.experimental.{<span class="hljs-type">BaseModule</span>, <span class="hljs-type">FlatIO</span>}
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="5"><div class="hljs-ln-n" data-line-number="5"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="5"><span class="hljs-keyword">import</span> chisel3.reflect.<span class="hljs-type">DataMirror</span>
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="6"><div class="hljs-ln-n" data-line-number="6"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="6"><span class="hljs-keyword">import</span> demo.<span class="hljs-type">DemoTop</span>.camelToSnake
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="7"><div class="hljs-ln-n" data-line-number="7"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="7"><span class="hljs-keyword">import</span> soc.<span class="hljs-type">SocConfig</span>
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="8"><div class="hljs-ln-n" data-line-number="8"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="8"><span class="hljs-keyword">import</span> xilinx.template.<span class="hljs-type">IBUFDS</span>
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="9"><div class="hljs-ln-n" data-line-number="9"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="9"> 
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="10"><div class="hljs-ln-n" data-line-number="10"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="10"><span class="hljs-keyword">import</span> scala.collection.<span class="hljs-type">SeqMap</span>
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="11"><div class="hljs-ln-n" data-line-number="11"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="11"> 
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="12"><div class="hljs-ln-n" data-line-number="12"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="12"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoRecord</span>(<span class="hljs-params">ports: <span class="hljs-type">Seq</span>[(<span class="hljs-type">String</span>, <span class="hljs-type">Data</span></span>)]) <span class="hljs-keyword">extends</span> <span class="hljs-title">Record</span> </span>{
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="13"><div class="hljs-ln-n" data-line-number="13"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="13">  <span class="hljs-keyword">lazy</span> <span class="hljs-keyword">val</span> elements = <span class="hljs-type">SeqMap</span>(ports.map { <span class="hljs-keyword">case</span> (name, port) =&gt;
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="14"><div class="hljs-ln-n" data-line-number="14"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="14">    name -&gt; port.cloneType
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="15"><div class="hljs-ln-n" data-line-number="15"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="15">  }: _*)
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="16"><div class="hljs-ln-n" data-line-number="16"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="16"> 
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="17"><div class="hljs-ln-n" data-line-number="17"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="17">}
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="18"><div class="hljs-ln-n" data-line-number="18"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="18"> 
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="19"><div class="hljs-ln-n" data-line-number="19"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="19"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoTop</span>(<span class="hljs-params">innerModule: =&gt; <span class="hljs-type">Module</span></span>)(<span class="hljs-params">implicit soc: <span class="hljs-type">SocConfig</span></span>) <span class="hljs-keyword">extends</span> <span class="hljs-title">RawModule</span> </span>{
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="20"><div class="hljs-ln-n" data-line-number="20"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="20">  <span class="hljs-keyword">val</span> sys_clk_p = <span class="hljs-type">IO</span>(<span class="hljs-type">Input</span>(<span class="hljs-type">Clock</span>()))
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="21"><div class="hljs-ln-n" data-line-number="21"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="21">  <span class="hljs-keyword">val</span> sys_clk_n = <span class="hljs-type">IO</span>(<span class="hljs-type">Input</span>(<span class="hljs-type">Clock</span>()))
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="22"><div class="hljs-ln-n" data-line-number="22"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="22">  <span class="hljs-keyword">val</span> rst_n     = <span class="hljs-type">IO</span>(<span class="hljs-type">Input</span>(<span class="hljs-type">AsyncReset</span>()))
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="23"><div class="hljs-ln-n" data-line-number="23"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="23">  <span class="hljs-keyword">val</span> rst       = !rst_n.asBool
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="24"><div class="hljs-ln-n" data-line-number="24"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="24"> 
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="25"><div class="hljs-ln-n" data-line-number="25"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="25">  <span class="hljs-keyword">val</span> ibufds = <span class="hljs-type">Module</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">IBUFDS</span>())
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="26"><div class="hljs-ln-n" data-line-number="26"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="26">  <span class="hljs-keyword">val</span> sysClk        = ibufds.io.<span class="hljs-type">O</span>
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="27"><div class="hljs-ln-n" data-line-number="27"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="27"> 
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="28"><div class="hljs-ln-n" data-line-number="28"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="28">  <span class="hljs-keyword">var</span> innerName = <span class="hljs-string">&quot;DemoTop&quot;</span>
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="29"><div class="hljs-ln-n" data-line-number="29"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="29">  <span class="hljs-keyword">val</span> mio = <span class="hljs-type">FlatIO</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">DemoRecord</span>(withClockAndReset(<span class="hljs-literal">false</span>.<span class="hljs-type">B</span>.asClock, <span class="hljs-literal">false</span>.<span class="hljs-type">B</span>) {
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="30"><div class="hljs-ln-n" data-line-number="30"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="30">    <span class="hljs-keyword">val</span> m = <span class="hljs-type">Module</span>(innerModule)
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="31"><div class="hljs-ln-n" data-line-number="31"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="31">    innerName = m.desiredName
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="32"><div class="hljs-ln-n" data-line-number="32"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="32">    modulePorts(m)
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="33"><div class="hljs-ln-n" data-line-number="33"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="33">  }))
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="34"><div class="hljs-ln-n" data-line-number="34"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="34"> 
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="35"><div class="hljs-ln-n" data-line-number="35"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="35">  ibufds.io.<span class="hljs-type">I</span>  := sys_clk_p
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="36"><div class="hljs-ln-n" data-line-number="36"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="36">  ibufds.io.<span class="hljs-type">IB</span> := sys_clk_n
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="37"><div class="hljs-ln-n" data-line-number="37"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="37"> 
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="38"><div class="hljs-ln-n" data-line-number="38"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="38">  withClockAndReset(sysClk, rst.asAsyncReset) {
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="39"><div class="hljs-ln-n" data-line-number="39"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="39">    <span class="hljs-keyword">val</span> module = <span class="hljs-type">Module</span>(innerModule)
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="40"><div class="hljs-ln-n" data-line-number="40"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="40">    mio.elements.zip(modulePorts(module)).foreach {
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="41"><div class="hljs-ln-n" data-line-number="41"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="41">      <span class="hljs-keyword">case</span> ((_, io), (_, innerIO)) =&gt; {
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="42"><div class="hljs-ln-n" data-line-number="42"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="42">        io &lt;&gt; innerIO
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="43"><div class="hljs-ln-n" data-line-number="43"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="43">      }
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="44"><div class="hljs-ln-n" data-line-number="44"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="44">    }
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="45"><div class="hljs-ln-n" data-line-number="45"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="45">  }
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="46"><div class="hljs-ln-n" data-line-number="46"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="46"> 
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="47"><div class="hljs-ln-n" data-line-number="47"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="47">  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">modulePorts</span></span>(module: <span class="hljs-type">BaseModule</span>) = {
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="48"><div class="hljs-ln-n" data-line-number="48"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="48">    <span class="hljs-type">DataMirror</span>.modulePorts(module).filter {
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="49"><div class="hljs-ln-n" data-line-number="49"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="49">      <span class="hljs-keyword">case</span> (<span class="hljs-string">&quot;clock&quot;</span>, _: <span class="hljs-type">Clock</span>) =&gt; <span class="hljs-literal">false</span>
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="50"><div class="hljs-ln-n" data-line-number="50"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="50">      <span class="hljs-keyword">case</span> (<span class="hljs-string">&quot;reset&quot;</span>, _: <span class="hljs-type">Reset</span>) =&gt; <span class="hljs-literal">false</span>
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="51"><div class="hljs-ln-n" data-line-number="51"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="51">      <span class="hljs-keyword">case</span> _ =&gt; <span class="hljs-literal">true</span>
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="52"><div class="hljs-ln-n" data-line-number="52"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="52">    }
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="53"><div class="hljs-ln-n" data-line-number="53"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="53">  }
</td></tr><tr><td class="hljs-ln-line hljs-ln-numbers" data-line-number="54"><div class="hljs-ln-n" data-line-number="54"></div></td><td class="hljs-ln-line hljs-ln-code" data-line-number="54">}
</td></tr></tbody></table></code></pre></figure>`,5)])))}};export{p as default,m as meta};
